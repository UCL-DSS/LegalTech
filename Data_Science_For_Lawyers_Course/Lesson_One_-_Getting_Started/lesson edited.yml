- Class: meta
  Course: Data Science For Lawyers Course
  Lesson: Lesson One - Getting Started
  Author: Original Workshops by Wolfgang Alschner. Edits, additions, Swirl integration, and Jupyter Notebooks by Amanda Lim, Bhavya Gupta, and Johann Ohler.
  Type: Standard
  Organization: UCL Data Science Society
  Version: 2.4.5

# Lesson Lesson One Introduction and Disclaimer
- Class: text
  Output: |- 
    Hi there! Welcome to the Data Science For Lawyers Course.
    
    This is Lesson One - Getting Started. 
    
    ------------
    
    Disclaimer:
    
    These lessons are based on workshops original created by Wolfgang Alschner , a Professor at the University of Ottawa. UCL Data Science Society does not take any credit for the creation of this material, except where additions/edits were made. Swirl integration, additional material and questions, as well as the Jupyter notebook were created by Amanda Lim, Bhavya Gupta, and Johann Ohler as part of a project initiated by the UCL Data Science Society. Visit http://www.datascienceforlawyers.org/learning-resources/ to view the original workshops.
    
    ------------
    
#Script vs. Console
- Class: text
  Output: |-
    Throughout the lesson, we'll be using terms like "console" and "script". 
    
    The SCRIPT is the top left pane in RStudio. The code you execute in here , but you can edit, add, and remove lines of code and execute it again since R saves this as an .R file. The SCRIPT is good if you want to execute multiple lines of code, save variable values, and edit that code over time. Hit cmd-enter to run all the code from the SCRIPT. 
    
    The CONSOLE is the bottom left pane in RStudio. All code that is run, as well as the output of that code, will show up here. You can also type in code directly into the CONSOLE and execute it, but this won't be saved. The CONSOLE is useful for when you want to quickly execute one line of code.
    
    Most of our exercises will be done in the CONSOLE, but feel free to save your answers in the SCRIPT if you'd like.
    
    
# Section One - Basic Calculations in R
- Class: text
  Output: |-
    ------------
    
    Lesson One - Getting Started, Section One - Basic Calculations in R
    
    Author - Wolfgang Alschner
    
    Edits - Amanda Lim
    
    Version - March 2018, Edits May 2020
    
    ------------

- Class: cmd_question
  Output: |-
    In simple terms, R is a calculator.
    
    You enter an equation and it returns the answer. 
    
    Let's try this with a few examples. Type in "1+1" in your R console.
  CorrectAnswer: 1+1
  AnswerTests: omnitest(correctExpr='1+1')
  Hint: Just type 1+1!
  
- Class: text
  Output: |-
    Notice how R returns "2", the answer to what you entered.
    
    Let's move on to some other calculations.
    
- Class: text
  Output: |-
    Here are some other operations in R...
    
    Division: 16/4
    
    Multiplication: 5*5
    
    Exponents: 3^2
    
- Class: cmd_question
  Output: |-
    Divide 10 by 2 in your console.
  CorrectAnswer: |-
    10/2
  AnswerTests: omnitest(correctExpr='10/2')
  Hint: Type the slash to divide!

- Class: text
  Output: |- 
    You can add COMMENTS to your code in the script using #. This way, R will understand that this part of your script is a comment and as such will not execute this part. Using comments in your script is useful, because it explains what your code is doing to the others who are reading your code or to yourself after returning to it after some time. You should comment your code as much as possible. It will make your life easier!
    
    Comments are used in the R Script since that code is executed time and time again. 
    
    Try adding a comment using # into your R script now; it should turn a different colour! 
    
    Hit enter in the console to move on to the next message. 

- Class: text
  Output: |- 
    In addition to performing calculations, you can also store information you have created. In the upper right hand corner of RStudio, you can see the ENVIRONMENT. Here, you see all variables you have created and their corresponding values. 
    
    You store values in variables using an arrow "<-" like so:
    
    v <- 10
- Class: cmd_question
  Output: |-
    Let's try. Assign the value of 1 to the variable x.
  CorrectAnswer: |-
    x<-1
  AnswerTests: omnitest(correctExpr='x<-1')
  Hint: |-
    Use the arrow <- to assign the value 1 to x. 
  
- Class: cmd_question
  Output: |-
    Now assign 2+2 to a variable y.
  CorrectAnswer: |-
    y <- 2+2
  AnswerTests: omnitest(correctExpr='y <- 2+2')
  Hint: |-
    Use the arrow <- to assign the value 2+2 to y.

- Class: text
  Output: |-
    Both x and y should show up in the top right hand pane in RStudio called "Environment". Check your Environment in RStudio now to see them. 
    
    Notice how the value of y is equal to 4. R automatically added 2+2 for us. How cool!

- Class: cmd_question
  Output: |- 
    To print the information you have stored in a variable, you can either type in the name of the variable in the script or console or use print(). 
    
    To tell R to print out the value of a variable, put that variable inside the brackets when typing print(). 
    
    Let's try printing variable y using print().
    
  CorrectAnswer: print(y)
  AnswerTests: omnitest(correctExpr='print(y)')
  Hint: Put the variable name inside the brackets. 

- Class: text
  Output: |- 
    Notice above that R "spits out" the answer.
    
    You can also perform operations with variables that have values assigned to them.
    
- Class: cmd_question
  Output: |- 
    Add variables x and y together in the console.
    
  CorrectAnswer: x+y
  AnswerTests: omnitest(correctExpr='x+y')
  Hint: Add the variables together with the + sign!
    
- Class: text
  Output: |- 
    We call these variables you create OBJECTS. You have almost complete liberty to name your object. All of the following are objects:

    silly_name <- 5+3
    
    v <- silly_name
    
    number_of_planets <- 7
    
    The values of objects appear in the "Environment" in RStudio once you execute the code.
    
    These values can be updated and changed at any time; you just have to change the value and hit cmd-enter again in the Script.

- Class: text
  Output: |- 
    You have now completed Lesson One - Getting Started, Section One - Basic Calculations in R.
    
    Great job!
# Section Two - Object Classes
- Class: text
  Output: |-
    ------------
    
    Lesson One - Getting Started, Section Two - Object Classes
    
    Author - Wolfgang Alschner
    
    Version - March 2018
    
    ------------
    
- Class: text
  Output: |- 
    R powerful is a powerful tool because you can work with numbers and with other types of data. 
    
    More specifically, there are three types of data objects that we will use.
    
    - numerical objects e.g. 1; 67; 5.56541
    
    - logical objects i.e. TRUE, FALSE
    
    - character objects e.g. "Hello World"

- Class: cmd_question
  Output: |-
    To determine the type of data object somethign is, you simply do class(). For example: 

    class(silly_name)
    
    [1] "numeric"
    
    This makes sense since we told R that silly_name was 5+3. 
    
    Define a variable another_silly_name with the value: "Hello World".
  CorrectAnswer: another_silly_name <- "Hello World"
  AnswerTests: omnitest(correctExpr='another_silly_name <- "Hello World"')
  Hint: Just type it into the script!

- Class: cmd_question
  Output: |- 
    Now, let's ask R in the console what the class of another_silly_name is by using class().
    
  CorrectAnswer: class(another_silly_name)
  AnswerTests: omnitest(correctExpr='class(another_silly_name)')
  Hint: Put the variable name inside the brackets. 

- Class: text
  Output: |- 
    Commands like class() or print() are FUNCTIONS. You can perform functions on R objects.
    
    Whenever you do not know what a funciton does, you can ask R using ?function_name(). For example:
    
    ?class()

- Class: text
  Output: |- 
    Up to now, we have been dealing with single values: one integer or one string. You can aggregate these values into VECTORS.
    
    To do so you aggregate values with c().
    
    numeric_vector <- c ( 1 , 2 , 3 , 4 , 5 )

- Class: cmd_question
  Output: |-
    Define a vector called my_numerical_vector with the numbers 5,4,3,2,1. 
  CorrectAnswer: my_vector <- c(5,4,3,2,1)
  AnswerTests: omnitest(correctExpr='my_vector <- c(5,4,3,2,1)')
  Hint: Use the arrow to define, and c() with all the numbers inside it. 

- Class: text
  Output: |- 
    Nice! my_vector is in your Environment now too. 
    
    You can also create vectors with character strings as well, like so:
    
    character_vector <- c ( "Days" , "Months" , "Year" )
    
- Class: cmd_question
  Output: |-
    Create a character vector called my_character_vector with the words "Monday", "Tuesday", "Wednesday". 
  CorrectAnswer: my_character_vector <- c("Monday", "Tuesday", "Wednesday")
  AnswerTests: omnitest(correctExpr= 'my_character_vector <- c("Monday", "Tuesday", "Wednesday")')
  Hint: Use the arrow to define, and c() with all the words inside it. 

- Class: text
  Output: |-
    That one shows up in our environment too. 

- Class: text
  Output: |-
    In turn, vectors can be aggregated into MATRICES and DATAFRAMES. Both are essentially tables. The difference is that matrices must be one type of data whereas dataframes can combine different types of data. We will work mostly with dataframes. Typically, you will load dataframes from external sources.


 # Section Five - Plotting Data 
- Class: text
  Output: |-
    ------------
    
    Lesson One - Getting Started, Section One - Basic Calculations in R
    
    Author - Wolfgang Alschner
    
    Edits - Bhavya Gupta
    
    Version - March 2018, Edits June 2020
    
    ------------
    
    

- Class: figure
  Output: Let's create a graph for visualising the following dataset of numbers of claims per year:

    Year	Claim

1	2008	32

2	2009	45

3	2010	67

4	2011	98

5	2012	112

6	2013	77

7	2014	67

8	2015	98

9	2016	103

10	2017	88
  Figure: Plot1.R
  FigureType: new
