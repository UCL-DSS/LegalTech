- Class: meta
  Course: Data Science For Lawyers Course
  Lesson: Lesson One - Getting Started
  Author: Original Workshops by Wolfgang Alschner. Edits, additions, Swirl integration, and Jupyter Notebooks by Amanda Lim, Bhavya Gupta, and Johann Ohler.
  Type: Standard
  Organization: UCL Data Science Society
  Version: 2.4.5

# Lesson Lesson One Introduction and Disclaimer
- Class: text
  Output: |-
    Hi there! Welcome to the Data Science For Lawyers Course.

    This is Lesson One - Getting Started.

    ------------

    Disclaimer:

    These lessons are based on workshops original created by Wolfgang Alscher , a Professor at the University of Ottawa. UCL Data Science Society does not take any credit for the creation of this material, except where additions/edits were made. Swirl integration, additional material and questions, as well as the Jupyter notebook were created by Amanda Lim, Bhavya Gupta, and Johann Ohler as part of a project initiated by the UCL Data Science Society. Visit http://www.datascienceforlawyers.org/learning-resources/ to view the original workshops.

    ------------

#Script vs. Console
- Class: text
  Output: |-
    Throughout the lesson, we'll be using terms like "console" and "script".

    The SCRIPT is the top left pane in RStudio. The code you execute in here , but you can edit, add, and remove lines of code and execute it again since R saves this as an .R file. The SCRIPT is good if you want to execute multiple lines of code, save variable values, and edit that code over time. Hit cmd-Enter (Mac) or ctrl-Enter (Non-Mac) to run all the code from the SCRIPT.

    The CONSOLE is the bottom left pane in RStudio. All code that is run, as well as the output of that code, will show up here. You can also type in code directly into the CONSOLE and execute it, but this won't be saved. The CONSOLE is useful for when you want to quickly execute one line of code.

    Most of our exercises will be done in the CONSOLE, but feel free to save your answers in the SCRIPT if you'd like.


# Section One - Basic Calculations in R
- Class: text
  Output: |-
    ------------

    Lesson One - Getting Started, Section One - Basic Calculations in R

    Author - Wolfgang Alschner

    Edits - Amanda Lim

    Version - March 2018, Edits May 2020

    ------------

- Class: cmd_question
  Output: |-
    In simple terms, R is a calculator.

    You enter an equation and it returns the answer.

    Let's try this with a few examples. Type in "1+1" in your R console.
  CorrectAnswer: 1+1
  AnswerTests: omnitest(correctExpr='1+1')
  Hint: Just type 1+1!

- Class: text
  Output: |-
    Notice how R returns "2", the answer to what you entered.

    Let's move on to some other calculations.

- Class: text
  Output: |-
    Here are some other operations in R...

    Division: 16/4

    Multiplication: 5*5

    Exponents: 3^2

- Class: cmd_question
  Output: |-
    Divide 10 by 2 in your console.
  CorrectAnswer: |-
    10/2
  AnswerTests: omnitest(correctExpr='10/2')
  Hint: Type the slash to divide!

- Class: text
  Output: |-
    You can add COMMENTS to your code in the script using #. This way, R will understand that this part of your script is a comment and as such will not execute this part. Using comments in your script is useful, because it explains what your code is doing to the others who are reading your code or to yourself after returning to it after some time. You should comment your code as much as possible. It will make your life easier!

    Comments are used in the R Script since that code is executed time and time again.

    Try adding a comment using # into your R script now; it should turn a different colour!

    Hit enter in the console to move on to the next message.

- Class: text
  Output: |-
    In addition to performing calculations, you can also store information you have created. In the upper right hand corner of RStudio, you can see the ENVIRONMENT. Here, you see all variables you have created and their corresponding values.

    You store values in variables using an arrow "<-" like so:

    v <- 10
- Class: cmd_question
  Output: |-
    Let's try. Assign the value of 1 to the variable x.
  CorrectAnswer: |-
    x<-1
  AnswerTests: omnitest(correctExpr='x<-1')
  Hint: |-
    Use the arrow <- to assign the value 1 to x.

- Class: cmd_question
  Output: |-
    Now assign 2+2 to a variable y.
  CorrectAnswer: |-
    y <- 2+2
  AnswerTests: omnitest(correctExpr='y <- 2+2')
  Hint: |-
    Use the arrow <- to assign the value 2+2 to y.

- Class: text
  Output: |-
    Both x and y should show up in the top right hand pane in RStudio called "Environment". Check your Environment in RStudio now to see them.

    Notice how the value of y is equal to 4. R automatically added 2+2 for us. How cool!

- Class: cmd_question
  Output: |-
    To print the information you have stored in a variable, you can either type in the name of the variable in the script or console or use print().

    To tell R to print out the value of a variable, put that variable inside the brackets when typing print().

    Let's try printing variable y using print().

  CorrectAnswer: print(y)
  AnswerTests: omnitest(correctExpr='print(y)')
  Hint: Put the variable name inside the brackets.

- Class: text
  Output: |-
    Notice above that R "spits out" the answer.

    You can also perform operations with variables that have values assigned to them.

- Class: cmd_question
  Output: |-
    Add variables x and y together in the console.

  CorrectAnswer: x+y
  AnswerTests: omnitest(correctExpr='x+y')
  Hint: Add the variables together with the + sign!

- Class: text
  Output: |-
    We call these variables you create OBJECTS. You have almost complete liberty to name your object. All of the following are objects:

    silly_name <- 5+3

    v <- silly_name

    number_of_planets <- 7

    The values of objects appear in the "Environment" in RStudio once you execute the code.

    These values can be updated and changed at any time; you just have to change the value and hit cmd-enter again in the Script.

- Class: text
  Output: |-
    You have now completed Lesson One - Getting Started, Section One - Basic Calculations in R.

    Great job!
# Section Two - Object Classes
- Class: text
  Output: |-
    ------------

    Lesson One - Getting Started, Section Two - Object Classes

    Author - Wolfgang Alschner

    Edits  - Amanda Lim

    Version - March 2018

    ------------

- Class: text
  Output: |-
    R powerful is a powerful tool because you can work with numbers and with other types of data.

    More specifically, there are three types of data objects that we will use.

    - numerical objects e.g. 1; 67; 5.56541

    - logical objects i.e. TRUE, FALSE

    - character objects e.g. "Hello World"

- Class: cmd_question
  Output: |-
    To determine the type of data object somethign is, you simply do class(). For example:

    class(silly_name)

    If we executed this code, R would spit out "numeric". This makes sense since we told R that silly_name was 5+3.

    Define a variable another_silly_name with the value: "Hello World".
  CorrectAnswer: another_silly_name <- "Hello World"
  AnswerTests: omnitest(correctExpr='another_silly_name <- "Hello World"')
  Hint: Just type it into the script!

- Class: cmd_question
  Output: |-
    Now, let's ask R in the console what the class of another_silly_name is by using class().

  CorrectAnswer: class(another_silly_name)
  AnswerTests: omnitest(correctExpr='class(another_silly_name)')
  Hint: Put the variable name inside the brackets.

- Class: text
  Output: |-
    Commands like class() or print() are FUNCTIONS. You can perform functions on R objects.

    Whenever you do not know what a funciton does, you can ask R using ?function_name(). For example:

    ?class()

- Class: text
  Output: |-
    Up to now, we have been dealing with single values: one integer or one string. You can aggregate these values into VECTORS.

    To do so you aggregate values with c().

    numeric_vector <- c ( 1 , 2 , 3 , 4 , 5 )

- Class: cmd_question
  Output: |-
    Define a vector called my_numerical_vector with the numbers 5,4,3,2,1.
  CorrectAnswer: my_vector <- c(5,4,3,2,1)
  AnswerTests: omnitest(correctExpr='my_vector <- c(5,4,3,2,1)')
  Hint: Use the arrow to define, and c() with all the numbers inside it.

- Class: text
  Output: |-
    Nice! my_vector is in your Environment now too.

    You can also create vectors with character strings as well, like so:

    character_vector <- c ( "Days" , "Months" , "Year" )

- Class: cmd_question
  Output: |-
    Create a character vector called my_character_vector with the words "Monday", "Tuesday", "Wednesday".
  CorrectAnswer: my_character_vector <- c("Monday", "Tuesday", "Wednesday")
  AnswerTests: omnitest(correctExpr= 'my_character_vector <- c("Monday", "Tuesday", "Wednesday")')
  Hint: Use the arrow to define, and c() with all the words inside it.

- Class: text
  Output: |-
    That one shows up in our environment too.

- Class: text
  Output: |-
    In turn, vectors can be aggregated into MATRICES and DATAFRAMES. Both are essentially tables. The difference is that matrices must be one type of data whereas dataframes can combine different types of data. We will work mostly with dataframes. Typically, you will load dataframes from external sources.


- Class: cmd_question
  Output: |-
    As an example, take a look at one of the in-built dataframe of R ("USArrests") that provides crime statistics of US states.

    type data("USArrests") into the console.
  CorrectAnswer: data("USArrests")
  AnswerTests: omnitest(correctExpr='data("USArrests")')
  Hint: Just type data("USArrests").

- Class: cmd_question
  Output: |-
    Now R knows to use the dataset USArrests. USArrests is also now in the envronment under "Data". Under "Data", you'll

    Now type print(USArrests) to view the dataset.
  CorrectAnswer: |-
    print(USArrests)
  AnswerTests: omnitest(correctExpr='data(USArrests)')
  Hint: Just type print(USArrests).

- Class: text
  Output: |-
    You have now completed Lesson One - Getting Started, Section One - Basic Calculations in R.

    Great job!

# Section Three - Accessing and Manipulating Data
- Class: text
  Output: |-
    ------------

    Lesson One - Getting Started, Section Three - my_character_vectoressing and Manipulating Data

    Author - Wolfgang Alschner

    Edits - Amanda Lim

    Version - March 2018, Edits June 2020

    ------------

- Class: text
  Output: |-
    There are different commands you can use to access data in your R objects, and their use differs slightly between object classes.

    To access an item in a list, just indicate its place within the vector through [ ].

- Class: cmd_question
  Output: |-
    Try creating a vector called fruit_vector with the words "Apple", "Banana", and "Orange", in that order.
  CorrectAnswer: |-
    fruit_vector <- c("Apple", "Banana", "Orange")
  AnswerTests: omnitest(correctExpr='fruit_vector <- c("Apple", "Banana", "Orange")')
  Hint: To make a vector, use c(). Don't forget quotations around the words as well.

- Class: cmd_question
  Output: |-
    Now, access the second item in the list by typing fruit_vector[2].
  CorrectAnswer: fruit_vector[2]
  AnswerTests: omnitest(correctExpr='fruit_vector[2]')
  Hint: Just type fruit_vector[2]

- Class: text
  Output: |-
    See how R spits out the second item in the vector? Pretty cool right!

- Class: text
  Output: |-
    If you are unsure about the location of given information in a list, use the which() function.

    For example,

    which(fruit_vector == "Apple")

    Will give you the location of the word apple in the vector fruit_vector.

- Class: cmd_question
  Output: Use the which() function to determine the location of the word "Orange" in fruit-vector.

  CorrectAnswer: which(fruit_vector == "Orange")
  AnswerTests: omnitest(correctExpr='which(fruit_vector == "Orange")')
  Hint: Use the format which(vector_name == "Item")

- Class: text
  Output: |-
    Most of the time we work with dataframes. Dataframes have two dimensions - rows and columns. Just like a table. When using [ ] to access values in dataframes, R has an in-built ordering of placing rows before columns i.e. dataframe[row,columm].

    So when you want to access data on "Arkansas" (4th row) on "Murder" (1st column), you would write:

    USArrests[4,1]

- Class: cmd_question
  Output: |-
    Try asking R to show us the data entry on "Arizona" (3rd row) on "Assault" (2nd column) of the USArrests dataframe.

  CorrectAnswer: USArrests[3,2]
  AnswerTests: omnitest(correctExpr='USArrests[3,2]')
  Hint: Use the brackets [] and specify which row and column.

- Class: text
  Output: Notice how R spits out just a single number? That's because we told it to give us whatever is in row 3, column 2 of the USArrests dataframe. Nice!

- Class: cmd_question
  Output: |-
    If you are interested in all columns for Arkansas just leave the space behind the comma blank.

    Try acessing all the data on "Arkansas" (row 4) in all columns.
  CorrectAnswer: USArrests[4,]
  AnswerTests: omnitest(correctExpr='USArrests[4,]')
  Hint: Just type [4,] in the brackets.

- Class: cmd_question
  Output: |-
    Similarly, if you are interested in murder rates (column 1) for all states (all rows) just leave the space in front of the comma blank.

    Try acessing the data for "Murder" (row 1) in all states.
  CorrectAnswer: USArrests[,1]
  AnswerTests: omnitest(correctExpr='USArrests[,1]')
  Hint: Just type [,1] in the brackets.

- Class: cmd_question
  Output: |-
    There are alternative ways to get to the same information.

    To access only the murder rates in the USArrests dataframe, you can call the column name:

    USArrests["Murder"]

    This would be the same as indicating the column.

    Try accessing the data in the column "Assault" now.
  CorrectAnswer: USArrests["Assault"]
  AnswerTests: omnitest(correctExpr='USArrests["Assault"]')
  Hint: Just type ["Assault"] in the brackets.

- Class: cmd_question
  Output: |-
    Alternatively, to access the data in a column in a dataframe we can also use the $ character.

    We would write:

    USArrests$Assault

    Which means to acess all the data in the column "Assault" in the dataset USArrests.

    Try using this method to access all the data in the column "UrbanPop"
  CorrectAnswer: USArrests$UrbanPop
  AnswerTests: omnitest(correctExpr='USArrests$UrbanPop')
  Hint: Just put UrbanPop after the dollar sign $

- Class: cmd_question
  Output: |-
    You can combine the above $ and [ ] approaches.

    For instance, to again get the murder rates in Arkansas (row 4), you can write:

    USArrests$Murder[4]

    Try using this method to access the Urban Population in California (row 5)
  CorrectAnswer: USArrests$UrbanPop[5]
  AnswerTests: omnitest(correctExpr='USArrests$UrbanPop[5]')
  Hint: Type out UrbanPop but indicate the row after it using [].

- Class: cmd_question
  Output: |-
    Sometimes we are only interested in subsets of the data, we then create objects from larger dataframes. Data scientists usually do this if they aren't working with part of a data, and don't need it.

    For instance, we want to create a new dataframe that only has the murder rate data.

    murder_rate <- USArrests["Murder"]

    Whenever we use or access the new dataframe, murder_rate, R will only show us the data in the column "Murder" in USArrests.

    Try creating the murder_rate dataframe by copying the code above.

  CorrectAnswer: murder_rate <- USArrests["Murder"]
  AnswerTests: omnitest(correctExpr='murder_rate <- USArrests["Murder"]')
  Hint: Just copy the code!

- Class: cmd_question
  Output: |-
    If we want to exclude murder rates from our dataset, then we can simply write [,-1] which will eliminate the first column.

    Create a new object called other_crimes removing the first column out of USArrests.
  CorrectAnswer: other_crimes <- USArrests[,-1]
  AnswerTests: omnitest(correctExpr='other_crimes <- USArrests[,-1]')
  Hint: Write [,-1] after USArrests to remove the first column.

- Class: cmd_question
  Output: |-
    Now let's print out other_crimes using print().
  CorrectAnswer: print(other_crimes)
  AnswerTests: omnitest(correctExpr='print(other_crimes)')
  Hint: Put the object name in the brackets ()

- Class: text
  Output: |-
    Notice how the first column, "Murder", isn't there anymore?

    Now what if we wanted to add it back?

    In order to combine datasets, we use two functions. The function rbind() glues two datasets together by their rows, while cbind() connects them by their columns.

    So if we want to merge the two datasets again, we can do:

    full_dataset <- cbind(dataframe_1, dataframe_2)

    Note that in order for cbind() to work, the dataframes must have common rows.

    And similarily, for rbind() to work, the dataframes must have common columns.

    If we tried to use these functions on two dataframes with no like columns/rows, it won't work!

- Class: cmd_question
  Output: |-
    Use cbind() to combine murder_rate and other_crimes, and assign it to a new dataframe called full_dataset.
  CorrectAnswer: full_dataset <- cbind(murder_rate, other_crimes)
  AnswerTests: omnitest(correctExpr='full_dataset <- cbind(murder_rate, other_crimes)')
  Hint: Assign using the arrow <- a combination of the murder_rate and other_crimes dataframes. To do this, put the two dataframes inside the brackets in cbind() with a comma separating them.

- Class: cmd_question
  Output: |-
    Now print out full_dataset.
  CorrectAnswer: print(full_dataset)
  AnswerTests: omnitest(correctExpr='print(full_dataset)')
  Hint: Just use the print() function.

- Class: text
  Output: Nice! Notice how the "Murder" column is back now, and that the two dataframes were combined using cbind() based on their common rows (the states).

- Class: text
  Output: |-
    You have now completed Lesson One, Section Three - Accessing and Manipulating Data.

    Nice job!

# Section Four - Plotting Data
- Class: text
  Output: |-
    ------------

    Lesson One - Getting Started, Section Four - Plotting Data

    Author - Wolfgang Alschner

    Edits - Bhavya Gupta

    Version - March 2018, Edits June 2020

    ------------
    
- Class: cmd_question
  Output: |-
    Let's create a  dataset of numbers of claims per year.
    First define a vector 'year' containing years 2008 to 2017
  CorrectAnswer: year <- c( 2008:2017)
  AnswerTests: omnitest(correctExpr='year <- c( 2008:2017)')
  Hint: Assign (2008:2017) to the c() function.

- Class: cmd_question
  Output: |-
    Now, Assign the following values to a vector "Claims" 
    32,45,67,98,112,77,67,98,103,88
  CorrectAnswer: claims <- c(32,45,67,98,112,77,67,98,103,88)
  AnswerTests: omnitest(correctExpr='claims <- c(32,45,67,98,112,77,67,98,103,88)')
  Hint: ...

- Class: cmd_question
  Output: |-
    Next, assign these two vectors to a data frame called "disputes".
  CorrectAnswer: disputes <- data.frame(year, claims)
  AnswerTests: omnitest(correctExpr='disputes <- data.frame(year, claims)')
  Hint: Use the function <- data.frame()

- Class: cmd_question
  Output: |-
    Now, print this data frame. 
  CorrectAnswer: print(disputes)
  AnswerTests: omnitest(correctExpr='print(disputes)')
  Hint: ...

- Class: cmd_question
  Output: |-
    We can visualise the data using the plot() function.
  CorrectAnswer: plot(disputes)
  AnswerTests: omnitest(correctExpr='plot(disputes)')
  Hint: Insert the name of the dataframe inside the plot() function.

- Class: figure
  Output: |-
   Graph for visualising the dataset of numbers of claims per year-
  Figure: Plot1.R
  FigureType: new


- Class: text
  Output: |-
    The plot() function, like other functions, in R has default settings.Want to know how the function can be customized to generate some really cool graphs?

    Consult the R Document to learn how the function can be customized. Simply enter-

    ?plot()

- Class: figure
  Output: |-
    After understanding the plot() function and its features, we can now add axis and graph labels using the arguments xlab, ylab and main.
    We use the following code 
    plot(disputes$year,disputes$claims, type = "p", xlab="Year", ylab="Claims", main = "Claims per Year")
  Figure: Plot2.R
  FigureType: new

- Class: figure
  Output: |-
    We can also plot data as both points and lines ("b") and change the color of the graph.The code is as follows
    plot(disputes$year,disputes$claims, type = "b", col="blue", xlab="Year", ylab="Claims", main = "Claims per Year")
  Figure: Plot3.R
  FigureType: new

- Class: cmd_question
  Output:  |-
    We can even plot text labels in R using the function text() in combination with plot().For instance, here we imagine that there were 3 different judges over our timeframe, which in turn had an impact on the data. 
    Let's say 2008 to 2010 had judge Parker, 2011 to 2013 had judge Colbert, and 2014 to 2017 had judge Jones.
    Let's start by assigning the three judges to a vector. Keep in mind that if the judges worked for more than one year, you must re-write their names more than once.Call this vector "judges".
  CorrectAnswer: judges <- c("Parker","Parker","Parker","Colbert","Colbert","Colbert","Jones","Jones","Jones","Jones")
  AnswerTests: omnitest(correctExpr='judges <- c("Parker","Parker","Parker","Colbert","Colbert","Colbert","Jones","Jones","Jones","Jones")')
  Hint: Assign the judges to a vector using <-c()
  
- Class: cmd_question
  Output: |-
    Now, re-write the dataframe "disputes" and add the "judges" vector.
  CorrectAnswer: disputes <- cbind(disputes, judges)
  AnswerTests: omnitest(correctExpr='disputes <- cbind(disputes, judges)')
  Hint: Add the judges to the dataframe using cbind()

- Class: cmd_question
  Output: |-
    Now, print the data.
  CorrectAnswer: print(disputes)
  AnswerTests: omnitest(correctExpr='print(disputes)')
  Hint: Use print().  
  
- Class: figure
  Output: |-
    Now, we can add the name of the judges to the plot with the text() function.
    We first create a line plot using 
    plot(disputes$year,disputes$claims, type = "l", col="blue", xlab="Year", ylab="Claims", main = "Claims per Year")
    After this, we add the text, i.e. the names of the judges.
    text(disputes$year,disputes$claims, label=disputes$judges)
  Figure: Plot4.R
  FigureType: new

# Section Five - Basic String Operations
- Class: text
  Output: |-
    ------------

    Lesson One - Getting Started, Section Five - Basic String Operations

    Author - Wolfgang Alschner

    Edits - Bhavya Gupta

    Version - March 2018, Edits June 2020

    ------------

- Class: cmd_question
  Output: |-
    In this course, we will often be dealing with text data. These are also called character strings in R.
    Create a character vector called 'example', which contains the words, "Hello World"
  CorrectAnswer: example <- "Hello World"
  AnswerTests: omnitest(correctExpr='example <- "Hello World"')
  Hint: Use the arrow followed by double quotes!

- Class: cmd_question
  Output: |-
    To merge two strings we can use the paste() function.
    This function uses a separator which is by default " " ( a space), i.e. the two strings joined together will be separated by a space.
    Create two strings , "Hello World" and "how is your day" and join them. Call this "new_example".
  CorrectAnswer: new_example <- paste("Hello World", "how is your day")
  AnswerTests: omnitest(correctExpr='new_example <- paste("Hello World", "how is your day")')
  Hint: Simply insert the two strongs inside the paste() function, separated by a comma.

- Class: cmd_question
  Output: |-
    We can also change the separator by adding an argument in the paste() function : sep= ","
    In this case, we have chosen the separator as a comma, but you can insert anything you like.
    Go ahead and try it!
  CorrectAnswer: new_example <- paste("Hello World", "how is your day", sep=", ")
  AnswerTests: omnitest(correctExpr='new_example <- paste("Hello World", "how is your day", sep=", ")')
  Hint: ...
  
- Class: cmd_question
  Output: |-
    Now print new_example.
  CorrectAnswer: print(new_example)
  AnswerTests: omnitest(correctExpr='print(new_example)')
  Hint: ...
  
- Class: cmd_question
  Output: |-
    To split a string we can use the strsplit() function.
    How would you split the string you just created?
  CorrectAnswer:   strsplit(new_example, ",")
  AnswerTests: omnitest(correctExpr='  strsplit(new_example, ",")')
  Hint: Use strsplit() and insert the string and separator in the parentheses.

- Class: cmd_question
  Output: |-
    When using the strsplit()function, R returns us a nested list. To access only the elements of the sublist we can ask for the first element in the sublist [[1]].
    Just insert the sublist after  strsplit().
  CorrectAnswer:  strsplit(new_example, ",")[[1]]
  AnswerTests: omnitest(correctExpr=' strsplit(new_example, ",")[[1]]')
  Hint: ...


- Class: text
  Output: |-
    As you will see in the remainder of the course, some functions return nested lists. This is a frequent source of trouble for people who are new to R. So if you have difficulties accessing specific elements in a vector, check to see whether you are dealing with a sublist.

    You have now reached the end of Section Five.


# Section Six - Loops
- Class: text
  Output: |-
    ------------

    Lesson One - Getting Started, Section Seven- Basic String Operations

    Author - Wolfgang Alschner

    Edits - Bhavya Gupta

    Version - March 2018, Edits June 2020

    ------------


- Class: text
  Output: |-
    It is often useful to apply a function to all of the elements in a vector or a data frame, rather than just applying it to one. For that we use a loop. Imagine you want to multiply the numbers 20 to 29 by 13. You can write 20*13, 21*13, 22*13 ... A loop does that work for you.

- Class: cmd_question
  Output: |-
    First, let's create a number list and print it. Call this list "number_list".
  CorrectAnswer: number_list <- c(20:29)
  AnswerTests: omnitest(correctExpr='number_list <- c(20:29)')
  Hint: Use the arrow followed by c(). The numbers go inside the parentheses.
  
- Class: cmd_question
  Output: |-
    Now print this number list. 
  CorrectAnswer: print(number_list)
  AnswerTests: omnitest(correctExpr='print(number_list)')
  Hint: Use the print() function.
  
- Class: cmd_question
  Output: |-
    In this example, we want to repeat the *13 operation for all 10 elements and print the result. We thus write a for loop like this: for each elements (20,21,22 ...) in my list multiply that element by 13. Note that the variable "element" could have any name, e.g. "i": for (i in number_list) {print (i*13)}.
    Now perform this operation (multiplication with the number 13) for each element in the number list
  CorrectAnswer: for (element in number_list) {
    print(element*13) }
  AnswerTests: omnitest(correctExpr='for (element in number_list) {
    print(element*13) }')
  Hint: Use the syntax given above.

- Class: cmd_question
  Output: |-
    We can also write the same loop without using the value of the element, but instead use its rank in the vector. That means we perform the function on the first element of the list, then the second and so on. This becomes useful when we want to access the same rank in different vectors. So how many ranks does our list have?
    To find out , we use the function length()
  CorrectAnswer: length(number_list)
  AnswerTests: omnitest(correctExpr='length(number_list)')
  Hint: Insert the number list in parentheses.

- Class: cmd_question
  Output: |-
    So we can write: for the ranks from 1 to length of list (here 10), perform a function on each element of that rank.
  CorrectAnswer:
    for (rank in 1:length(number_list)) {print(number_list[rank]*13)}
  AnswerTests: omnitest(correctExpr='for (rank in 1:length(number_list)) {print(number_list[rank]*13)}')
  Hint: ...

- Class: cmd_question
  Output: |-
    Both approaches yield the same result, but use a different grammar. You can see that when you print element and rank.
    First print element.
  CorrectAnswer: print(element)
  AnswerTests: omnitest(correctExpr='print(element)')
  Hint: ...

- Class: cmd_question
  Output: |-
    Now Print Rank.
  CorrectAnswer: print(rank)
  AnswerTests: omnitest(correctExpr='print(rank)')
  Hint: ...


- Class: cmd_question
  Output: |-
    Let's try a loop on the on a dataframe.
    This is just a sample dataframe with 3 rows and 4 columns. Since this is slightly harder to try, here's the code for you.
    sample_dataframe <- as.data.frame(matrix(data=1:12, nrow=3, ncol=4, byrow=FALSE))
    Now create this dataframe.
  CorrectAnswer: sample_dataframe <- as.data.frame(matrix(data=1:12, nrow=3, ncol=4, byrow=FALSE))
  AnswerTests: omnitest(correctExpr='sample_dataframe <- as.data.frame(matrix(data=1:12, nrow=3, ncol=4, byrow=FALSE))')
  Hint: ...
  
- Class: cmd_question
  Output: |-
    Now, print this dataframe.
  CorrectAnswer: print(sample_dataframe)
  AnswerTests: omnitest(correctExpr='print(sample_dataframe)')
  Hint: ...

- Class: cmd_question
  Output: |-
    Now, we want to know the sum of each of the three rows and columns. What do you think the loop would look like?
  CorrectAnswer: for (row in 1:nrow(sample_dataframe)) { print(sum(sample_dataframe[row,])) }
  AnswerTests: omnitest(correctExpr='for (row in 1:nrow(sample_dataframe)) { print(sum(sample_dataframe[row,])) }')
  Hint: FOR the rows IN row number 1 to the total number of rows in my sample_dataframe , PRINT the SUM of each row.

- Class: cmd_question
  Output: |-
    Now try doing this for columns instead.
  CorrectAnswer: for (col in 1:ncol(sample_dataframe)) {print(sum(sample_dataframe[,col])) }
  AnswerTests: omnitest(correctExpr='for (col in 1:ncol(sample_dataframe)) {print(sum(sample_dataframe[,col])) }')
  Hint: |-
    To do the same thing for column sums, we just need to (1) adjust for the number of columnes (ncol) and (2) adjust the comma.
    Note that "row" can also be changed to "col" but this is not necessary, it helps understanding what is being done.






